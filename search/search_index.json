{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Docs as Code It consists of markdown files (.md extension) and images (typically screenshots) referenced by those markdown files, and can be organized into further subfolders. The convention adopted here is generally one folder per document, where each folder contains a single markdown file and all the images referenced by it. The content can be updated using a normal git worfklow, ie cloning the repo to a local machine and then editing the markdown files, or adding new ones, etc., and finally pushing the committed changes back to the origin. It is also possible to edit directly on github's web interface.","title":"Welcome to Docs as Code"},{"location":"#welcome-to-docs-as-code","text":"It consists of markdown files (.md extension) and images (typically screenshots) referenced by those markdown files, and can be organized into further subfolders. The convention adopted here is generally one folder per document, where each folder contains a single markdown file and all the images referenced by it. The content can be updated using a normal git worfklow, ie cloning the repo to a local machine and then editing the markdown files, or adding new ones, etc., and finally pushing the committed changes back to the origin. It is also possible to edit directly on github's web interface.","title":"Welcome to Docs as Code"},{"location":"API%20DOCs/API-Documentation/","text":"Purpose The purpose of this document is to help a beginner level developer/student to add weather API to a website. This API documentation includes a sample request, response in JSON format with a detailed description of the response attributes. Introduction The weather API is a sample API documented to add weather information to the website. Weather API Weather API provides information about the weather conditions like temperature, winds, cloudiness, etc., for a specific location. Mandatory-Headers Key Value Authentication API Key Content-Type application/json EndPoints Get / weather Retrieves the weather conditions for a specific location. Parameters Path Parameters Path Parameter Description {weather} The details of the weather conditions for a specific location using coordinates. Querystring Parameters Query string Parameter| Description| Required/Optional ----------|-------|-----| Zip |The Zip code of the city.|Required| units |Units to measure the temperature. Imperial: Fahrenheit ; Kevin, Metric: Celsius |Optional Days |The number of days.|Required Lat & Long | Coordinates (Latitude and Longitude) of the location.|Optional Sample-Request https://api.openweathermap.org/data/2.5/weather?Zip=95129&units=imperial&appid=APIKEY&days=5&lat=37.2948374&lon=-122.022296 Note : In the above sample request, replace APIKEY with your actual API KEY. In cURL curl --location --request GET 'https://api.openweathermap.org/data/2.5/weather?Zip=95129&units=imperial&appid=APIKEY&days=5&lat=37.2948374&lon=-122.022296' Sample Response The following is a sample response for the above request: Note : Units in this example are Imperial:Fahrenheit. { \"coord\": { \"lon\": -122.02, \"lat\": 37.29 }, \"weather\": [ { \"id\": 803, \"main\": \"Clouds\", \"description\": \"broken clouds\", \"icon\": \"04d\" } ], \"base\": \"stations\", \"main\": { \"temp\": 75.79, \"feels_like\": 64.72, \"temp_min\": 73, \"temp_max\": 78.01, \"pressure\": 1015, \"humidity\": 47 }, \"visibility\": 16093, \"wind\": { \"speed\": 21.92, \"deg\": 330 }, \"clouds\": { \"all\": 75 }, \"dt\": 1592180828, \"sys\": { \"type\": 1, \"id\": 5845, \"country\": \"US\", \"sunrise\": 1592138828, \"sunset\": 1592191798 }, \"timezone\": -25200, \"id\": 5393485, \"name\": \"Saratoga\", \"cod\": 200 } Response Attributes Following table details each response attribute: Attribute Description coord The coordinates of the geolocation. Refer 1.1 coord for details. weather An object containing details of more weather condition codes. Refer 1.2 weather for details. base An internal parameter. main An object containing temperature details. Refer 1.3 main for details. visibility In meteorology, visibility is a measure of the distance at which an object or light can be clearly discerned. Units are Meters. wind An object containing wind parameters. Refer 1.4 wind for details. clouds Determines the cloudiness. Refer 1.5 Clouds for details. dt Time of data calculation (UNIX, UTC). sys An internal parameter. timezone Shift in seconds from UTC (Universal Time Coordinated). id ID of the city. name Name of the city. cod API success/failure code. Following are the objects : 1.1 Coord Attribute Data type Description lon Double Longitude of the location. lat Double Latitude of the location. 1.2 weather Attribute Data type Description id Integer A weather condition ID. main String Group of weather parameters. description String Description of the weather condition in the group. icon String A weather icon ID. 1.3 main Attribute Data Type Description temp Double Temperature. Units to measure : Metric -> Celsius and Imperial -> Fahrenheit. feels_like Double A human felt temperature. Units to measure : Metric -> Celsius, Imperial -> Fahrenheit. temp_min Double Lowest calculated temperature of the day. Units to measure : Kevin, Metric -> Celsius, Imperial -> Fahrenheit temp_max Double Highest calculated temperature of the day. Units to measure : Kevin, Metric -> Celsius, Imperial -> Fahrenheit, pressure Double Atmospheric pressure (assuming the location is at Sea-Level). humidity Double Percentage of humidity. 1.4 wind Attribute | Data type |Description ----------|-----------|------| speed |Double|Speed of the wind. Units to measure : Metric -> meter/second, Imperial -> miles/hour deg |Double|The direction of the wind. Units to measure: Degrees. 1.5 Clouds Attribute | Data type|Description ----------|---------|-----| all |Integer| Indicates the percentage of cloudiness. 1.6 sys Attribute Data type Description type Integer Type of a sys parameter (Internal). id Integer Type of a sys parameter (Internal). country String Name of the country. Each country has a specific code, e.g., United States-US, Japan-JP. sunrise Integer Time of the sunrise. Units to measure: UNIX, UTC sunset Integer Time of the sunset. Units to measure: UNIX, UTC","title":"API Documentation"},{"location":"API%20DOCs/API-Documentation/#purpose","text":"The purpose of this document is to help a beginner level developer/student to add weather API to a website. This API documentation includes a sample request, response in JSON format with a detailed description of the response attributes.","title":"Purpose"},{"location":"API%20DOCs/API-Documentation/#introduction","text":"The weather API is a sample API documented to add weather information to the website.","title":"Introduction"},{"location":"API%20DOCs/API-Documentation/#weather-api","text":"Weather API provides information about the weather conditions like temperature, winds, cloudiness, etc., for a specific location.","title":"Weather API"},{"location":"API%20DOCs/API-Documentation/#mandatory-headers","text":"Key Value Authentication API Key Content-Type application/json","title":"Mandatory-Headers"},{"location":"API%20DOCs/API-Documentation/#endpoints","text":"Get / weather Retrieves the weather conditions for a specific location.","title":"EndPoints"},{"location":"API%20DOCs/API-Documentation/#parameters","text":"","title":"Parameters"},{"location":"API%20DOCs/API-Documentation/#path-parameters","text":"Path Parameter Description {weather} The details of the weather conditions for a specific location using coordinates.","title":"Path Parameters"},{"location":"API%20DOCs/API-Documentation/#querystring-parameters","text":"Query string Parameter| Description| Required/Optional ----------|-------|-----| Zip |The Zip code of the city.|Required| units |Units to measure the temperature. Imperial: Fahrenheit ; Kevin, Metric: Celsius |Optional Days |The number of days.|Required Lat & Long | Coordinates (Latitude and Longitude) of the location.|Optional","title":"Querystring Parameters"},{"location":"API%20DOCs/API-Documentation/#sample-request","text":"https://api.openweathermap.org/data/2.5/weather?Zip=95129&units=imperial&appid=APIKEY&days=5&lat=37.2948374&lon=-122.022296 Note : In the above sample request, replace APIKEY with your actual API KEY. In cURL curl --location --request GET 'https://api.openweathermap.org/data/2.5/weather?Zip=95129&units=imperial&appid=APIKEY&days=5&lat=37.2948374&lon=-122.022296'","title":"Sample-Request"},{"location":"API%20DOCs/API-Documentation/#sample-response","text":"The following is a sample response for the above request: Note : Units in this example are Imperial:Fahrenheit. { \"coord\": { \"lon\": -122.02, \"lat\": 37.29 }, \"weather\": [ { \"id\": 803, \"main\": \"Clouds\", \"description\": \"broken clouds\", \"icon\": \"04d\" } ], \"base\": \"stations\", \"main\": { \"temp\": 75.79, \"feels_like\": 64.72, \"temp_min\": 73, \"temp_max\": 78.01, \"pressure\": 1015, \"humidity\": 47 }, \"visibility\": 16093, \"wind\": { \"speed\": 21.92, \"deg\": 330 }, \"clouds\": { \"all\": 75 }, \"dt\": 1592180828, \"sys\": { \"type\": 1, \"id\": 5845, \"country\": \"US\", \"sunrise\": 1592138828, \"sunset\": 1592191798 }, \"timezone\": -25200, \"id\": 5393485, \"name\": \"Saratoga\", \"cod\": 200 }","title":"Sample Response"},{"location":"API%20DOCs/API-Documentation/#response-attributes","text":"Following table details each response attribute: Attribute Description coord The coordinates of the geolocation. Refer 1.1 coord for details. weather An object containing details of more weather condition codes. Refer 1.2 weather for details. base An internal parameter. main An object containing temperature details. Refer 1.3 main for details. visibility In meteorology, visibility is a measure of the distance at which an object or light can be clearly discerned. Units are Meters. wind An object containing wind parameters. Refer 1.4 wind for details. clouds Determines the cloudiness. Refer 1.5 Clouds for details. dt Time of data calculation (UNIX, UTC). sys An internal parameter. timezone Shift in seconds from UTC (Universal Time Coordinated). id ID of the city. name Name of the city. cod API success/failure code.","title":"Response Attributes"},{"location":"API%20DOCs/API-Documentation/#following-are-the-objects","text":"1.1 Coord Attribute Data type Description lon Double Longitude of the location. lat Double Latitude of the location. 1.2 weather Attribute Data type Description id Integer A weather condition ID. main String Group of weather parameters. description String Description of the weather condition in the group. icon String A weather icon ID. 1.3 main Attribute Data Type Description temp Double Temperature. Units to measure : Metric -> Celsius and Imperial -> Fahrenheit. feels_like Double A human felt temperature. Units to measure : Metric -> Celsius, Imperial -> Fahrenheit. temp_min Double Lowest calculated temperature of the day. Units to measure : Kevin, Metric -> Celsius, Imperial -> Fahrenheit temp_max Double Highest calculated temperature of the day. Units to measure : Kevin, Metric -> Celsius, Imperial -> Fahrenheit, pressure Double Atmospheric pressure (assuming the location is at Sea-Level). humidity Double Percentage of humidity. 1.4 wind Attribute | Data type |Description ----------|-----------|------| speed |Double|Speed of the wind. Units to measure : Metric -> meter/second, Imperial -> miles/hour deg |Double|The direction of the wind. Units to measure: Degrees. 1.5 Clouds Attribute | Data type|Description ----------|---------|-----| all |Integer| Indicates the percentage of cloudiness. 1.6 sys Attribute Data type Description type Integer Type of a sys parameter (Internal). id Integer Type of a sys parameter (Internal). country String Name of the country. Each country has a specific code, e.g., United States-US, Japan-JP. sunrise Integer Time of the sunrise. Units to measure: UNIX, UTC sunset Integer Time of the sunset. Units to measure: UNIX, UTC","title":"Following are the objects :"},{"location":"explanation_docs/API-PARADIGMS/","text":"API paradigms Over the years, multiple API paradigms have emerged, being able able to pick the right paradigm is important. In this article i explain the paradigms you need to know about. An API paradigm defines the interface exposing backend data of a service to other applications. We can classify APIs into two categories: Request\u2013Response APIs Event driven APIs Request\u2013Response APIs Request\u2013response APIs typically expose an interface through an HTTP-based web server. APIs define a set of endpoints. Clients make HTTP requests for data to those endpoints and the server returns responses. The response is typically sent back as JSON or XML. There are three common paradigms used by services to expose request\u2013response APIs: REST, RPC, and GraphQL. 1.Representational State Transfer Representational State Transfer (REST) is the most popular choice for API development lately. The REST paradigm is used by provid\u2010 ers like Google, Stripe, Twitter, and GitHub. REST is all about resources. A resource is an entity that can be identified, named, addressed, or handled on the web. REST APIs expose data as resour\u2010 ces and use standard HTTP methods to represent Create, Read, Update, and Delete (CRUD) transactions against these resources. For instance, Stripe\u2019s API represents customers, charges, balance, refunds, events, files, and payouts as resources. Here are some general rules REST APIs follow: Resources are part of URLs, like /users. -For each resource, two URLs are generally implemented: one for the collection, like /users, and one for a specific element, like /users/U123. Nouns are used instead of verbs for resources. For example, instead of /getUserInfo/U123, use /users/U123. HTTP methods like GET, POST, UPDATE , and DELETE inform the server about the action to be performed. Different HTTP meth\u2010 ods invoked on the same URL provide different functionality: Create Use POST for creating new resources. Read Use GET for reading resources. GET requests never, ever change the state of the resource. They have no side effects; the GET method has a read-only semantic. GET is idempo\u2010 tent. Consequently, you can cache the calls perfectly. Update Use PUT for replacing a resource and PATCH for partial updates for existing resources. Delete Use DELETE for deleting existing resources. \u2022 Standard HTTP response status codes are returned by the server indicating success or failure. Generally, codes in the 2XX range indicate success, 3XX codes indicate a resource has 2.Remote Procedure Call Remote Procedure Call (RPC) is one of the simplest API paradigms, in which a client executes a block of code on another server. Whereas REST is about resources, RPC is about actions. Clients typ\u2010 ically pass a method name and arguments to a server and receive back JSON or XML. RPC APIs generally follow two simple rules: \u2022 The endpoints contain the name of the operation to be exe\u2010 cuted. \u2022 API calls are made with the HTTP verb that is most appropri\u2010 ate: GET for read-only requests and POST for others. RPC style works great for APIs that expose a variety of actions that might have more nuances and complications than can be encapsula\u2010 ted with CRUD or for which there are side effects unrelated to the \u201cresource\u201d at hand. RPC-style APIs also accommodate complicated resource models or actions upon multiple types of resources 3. GraphQL GraphQL is a query language for APIs that has gained significant traction recently. It was developed internally by Facebook in 2012 before being publicly released in 2015 and has been adopted by API providers like GitHub, Yelp, and Pinterest. GraphQL allows clients to define the structure of the data required, and the server returns exactly that structure. ```js{ user(login: \"saurabhsahni\") { id name company createdAt } Example Response from GitHub GraphQL API { \"data\": { \"user\": { \"id\": \"MDQ6VXNlcjY1MDI5\", \"name\": \"Erick Njuki\", \"company\": \"Slack\", \"createdAt\": \"2009-03-19T21:00:06Z\" } } } Unlike REST and RPC APIs, GraphQL APIs need only a single URL endpoint. Similarly, you do not need different HTTP verbs to describe the operation. Instead, you indicate in the JSON body whether you\u2019re performing a query or a mutation, as illustrated in Example 2-7. GraphQL APIs support GET and POST verbs. Example 2-7. GraphQL API call to GitHub ```js POST /graphql HOST api.github.com Content-Type: application/json Authorization: bearer 2332dg1acf9f502737d5e xoxp-16501860787-17163410960-113570727396-7051650 { \"query\": \"query { viewer { login }}\" } Event-Driven APIs With request\u2013response APIs, for services with constantly changing data, the response can quickly become stale. Developers who want to stay up to date with the changes in data often end up polling the API. With polling, developers constantly query API endpoints at a predetermined frequency and look for new data, To share data about events in real time, there are three common mechanisms: WebHooks, WebSockets, and HTTP Streaming. We dive deeper into each of them in the subsections that follow. WebHooks A WebHook is just a URL that accepts an HTTP POST (or GET, PUT, or DELETE). An API provider implementing WebHooks will simply POST a message to the configured URL when something happens. Unlike with request\u2013response APIs, with WebHooks, you can receive updates in real time. Several API providers, like Slack, Stripe, GitHub, and Zapier, support WebHooks. For instance, if you want to keep track of \u201cchannels\u201d in a Slack team with Slack\u2019s Web API, you might need to continuously poll the API for new channels. 1. WebSockets WebSocket is a protocol used to establish a two-way streaming com\u2010 munication channel over a single Transport Control Protocol (TCP) connection. Although the protocol is generally used between a web client (e.g., a browser) and a server, it\u2019s sometimes used for serverto-server communication, as well. The WebSocket protocol is supported by major browsers and often used by real-time applications. Slack uses WebSockets to send all kinds of events happening in a workspace to Slack\u2019s clients, includ\u2010 ing new messages, emoji reactions added to items, and channel crea\u2010 tions. Slack also provides a WebSocket-based Real Time Messaging API to developers so that they can receive events from Slack in real time and send messages as users. Similarly, Trello uses WebSockets to push changes made by other people down from servers to brows\u2010 ers listening on the appropriate channels, and Blockchain uses its WebSocket API to send real-time notifications about new transac\u2010 tions and blocks utilizes the HTTP Streaming protocol to deliver data through a single connection opened between an app and Twitter\u2019s streaming API. The big benefit for developers is that they don\u2019t need to poll the Twitter API continuously for new tweets. Twitter\u2019s Streaming API can push new tweets over a single HTTP connection instead of a custom protocol. This saves resources for both Twitter and the developer. HTTP Streaming is easy to consume. However, one of the issues with it is related to buffering. Clients and proxies often have buffer limits. They might not start rendering data to the application until a threshold is met. Also, if clients want to frequently change what kind of events they listen to, HTTP Streaming might not be ideal because it requires reconnections.","title":"API paradigms"},{"location":"explanation_docs/API-PARADIGMS/#api-paradigms","text":"Over the years, multiple API paradigms have emerged, being able able to pick the right paradigm is important. In this article i explain the paradigms you need to know about. An API paradigm defines the interface exposing backend data of a service to other applications. We can classify APIs into two categories: Request\u2013Response APIs Event driven APIs","title":"API paradigms"},{"location":"explanation_docs/API-PARADIGMS/#requestresponse-apis","text":"Request\u2013response APIs typically expose an interface through an HTTP-based web server. APIs define a set of endpoints. Clients make HTTP requests for data to those endpoints and the server returns responses. The response is typically sent back as JSON or XML. There are three common paradigms used by services to expose request\u2013response APIs: REST, RPC, and GraphQL. 1.Representational State Transfer Representational State Transfer (REST) is the most popular choice for API development lately. The REST paradigm is used by provid\u2010 ers like Google, Stripe, Twitter, and GitHub. REST is all about resources. A resource is an entity that can be identified, named, addressed, or handled on the web. REST APIs expose data as resour\u2010 ces and use standard HTTP methods to represent Create, Read, Update, and Delete (CRUD) transactions against these resources. For instance, Stripe\u2019s API represents customers, charges, balance, refunds, events, files, and payouts as resources. Here are some general rules REST APIs follow: Resources are part of URLs, like /users. -For each resource, two URLs are generally implemented: one for the collection, like /users, and one for a specific element, like /users/U123. Nouns are used instead of verbs for resources. For example, instead of /getUserInfo/U123, use /users/U123. HTTP methods like GET, POST, UPDATE , and DELETE inform the server about the action to be performed. Different HTTP meth\u2010 ods invoked on the same URL provide different functionality: Create Use POST for creating new resources. Read Use GET for reading resources. GET requests never, ever change the state of the resource. They have no side effects; the GET method has a read-only semantic. GET is idempo\u2010 tent. Consequently, you can cache the calls perfectly. Update Use PUT for replacing a resource and PATCH for partial updates for existing resources. Delete Use DELETE for deleting existing resources. \u2022 Standard HTTP response status codes are returned by the server indicating success or failure. Generally, codes in the 2XX range indicate success, 3XX codes indicate a resource has 2.Remote Procedure Call Remote Procedure Call (RPC) is one of the simplest API paradigms, in which a client executes a block of code on another server. Whereas REST is about resources, RPC is about actions. Clients typ\u2010 ically pass a method name and arguments to a server and receive back JSON or XML. RPC APIs generally follow two simple rules: \u2022 The endpoints contain the name of the operation to be exe\u2010 cuted. \u2022 API calls are made with the HTTP verb that is most appropri\u2010 ate: GET for read-only requests and POST for others. RPC style works great for APIs that expose a variety of actions that might have more nuances and complications than can be encapsula\u2010 ted with CRUD or for which there are side effects unrelated to the \u201cresource\u201d at hand. RPC-style APIs also accommodate complicated resource models or actions upon multiple types of resources 3. GraphQL GraphQL is a query language for APIs that has gained significant traction recently. It was developed internally by Facebook in 2012 before being publicly released in 2015 and has been adopted by API providers like GitHub, Yelp, and Pinterest. GraphQL allows clients to define the structure of the data required, and the server returns exactly that structure. ```js{ user(login: \"saurabhsahni\") { id name company createdAt } Example Response from GitHub GraphQL API { \"data\": { \"user\": { \"id\": \"MDQ6VXNlcjY1MDI5\", \"name\": \"Erick Njuki\", \"company\": \"Slack\", \"createdAt\": \"2009-03-19T21:00:06Z\" } } } Unlike REST and RPC APIs, GraphQL APIs need only a single URL endpoint. Similarly, you do not need different HTTP verbs to describe the operation. Instead, you indicate in the JSON body whether you\u2019re performing a query or a mutation, as illustrated in Example 2-7. GraphQL APIs support GET and POST verbs. Example 2-7. GraphQL API call to GitHub ```js POST /graphql HOST api.github.com Content-Type: application/json Authorization: bearer 2332dg1acf9f502737d5e xoxp-16501860787-17163410960-113570727396-7051650 { \"query\": \"query { viewer { login }}\" }","title":"Request\u2013Response APIs"},{"location":"explanation_docs/API-PARADIGMS/#event-driven-apis","text":"With request\u2013response APIs, for services with constantly changing data, the response can quickly become stale. Developers who want to stay up to date with the changes in data often end up polling the API. With polling, developers constantly query API endpoints at a predetermined frequency and look for new data, To share data about events in real time, there are three common mechanisms: WebHooks, WebSockets, and HTTP Streaming. We dive deeper into each of them in the subsections that follow. WebHooks A WebHook is just a URL that accepts an HTTP POST (or GET, PUT, or DELETE). An API provider implementing WebHooks will simply POST a message to the configured URL when something happens. Unlike with request\u2013response APIs, with WebHooks, you can receive updates in real time. Several API providers, like Slack, Stripe, GitHub, and Zapier, support WebHooks. For instance, if you want to keep track of \u201cchannels\u201d in a Slack team with Slack\u2019s Web API, you might need to continuously poll the API for new channels. 1. WebSockets WebSocket is a protocol used to establish a two-way streaming com\u2010 munication channel over a single Transport Control Protocol (TCP) connection. Although the protocol is generally used between a web client (e.g., a browser) and a server, it\u2019s sometimes used for serverto-server communication, as well. The WebSocket protocol is supported by major browsers and often used by real-time applications. Slack uses WebSockets to send all kinds of events happening in a workspace to Slack\u2019s clients, includ\u2010 ing new messages, emoji reactions added to items, and channel crea\u2010 tions. Slack also provides a WebSocket-based Real Time Messaging API to developers so that they can receive events from Slack in real time and send messages as users. Similarly, Trello uses WebSockets to push changes made by other people down from servers to brows\u2010 ers listening on the appropriate channels, and Blockchain uses its WebSocket API to send real-time notifications about new transac\u2010 tions and blocks utilizes the HTTP Streaming protocol to deliver data through a single connection opened between an app and Twitter\u2019s streaming API. The big benefit for developers is that they don\u2019t need to poll the Twitter API continuously for new tweets. Twitter\u2019s Streaming API can push new tweets over a single HTTP connection instead of a custom protocol. This saves resources for both Twitter and the developer. HTTP Streaming is easy to consume. However, one of the issues with it is related to buffering. Clients and proxies often have buffer limits. They might not start rendering data to the application until a threshold is met. Also, if clients want to frequently change what kind of events they listen to, HTTP Streaming might not be ideal because it requires reconnections.","title":"Event-Driven APIs"},{"location":"explanation_docs/Airbnb/","text":"Purpose The purpose of this document is to provide newbies to Airbnb, an insight into its working model. This document provides a general idea of how Airbnb works for the two parties, i.e.,Guests (who rent the place) and Hosts (who rent their place out). Airbnb Introduction AirBedandBreakfast, commonly referred to Airbnb, is a global online hospitality service provider whose services can be accessed through the website and mobile platforms. It operates in 190+ countries in nearly 100,000 cities with 6 million+ listings. It is not a real estate company but an online market place where it connects hosts with the guests. This platform can be used for listing as well as renting the property. Airbnb Working Model It started as a customer innovation by creating a new market for people who rent rooms in other\u2019s houses. Before Airbnb, it was inconceivable to allow a stranger to share the space. So, Airbnb came up with Trust by design model. It uses a robust system of identity verification and reviews for both hosts and guests. The review system is the center of the trust solution that previous sites lacked. Airbnb working model for hosts After creating an account with Airbnb, hosts can post their property listing by providing details like amenities, rules, and house types. They can decide on the price of the listing based on Airbnb recommendations. The hosts get the review based on the service provided, and if they get consistently high reviews, they become super hosts. Hosts can also list their houses under a specialty listing category. These houses should have a unique style and high quality to get under this listing. To get into this listing, hosts need to apply, and an in-person inspection is conducted. When all the requirements are met, a special plus badge is given for differentiating these listings from the standard ones. Airbnb hosts can also become a tour guide but creating an Experience like city-tour, hike, tasting local kitchen, and more. Airbnb working model for guests After creating a free account, guests can browse through a variety of options available and select the one that suits them. If a guest is creating an account for the first time, a driver\u2019s license is required. Guests can search for lodging based on their requirements using filters like date of their check-in /check-out, location, number of guests, price range, and Room-type. Using Request a book feature, they can book the listing and wait for the host\u2019s approval. If the guest wants to book a listing immediately, they can use the Instant book feature without waiting for the host\u2019s approval. Guests can also chat with the hosts. Guests can also book some fun experiences like city-tours, wine-tasting, yoga classes, and more by using the Experiences filter option. Guests can find a unique place that fits their criteria for specific occasions like weddings, official trips, dinner parties, and more using Airbnb Collections feature and also look for special plus badge houses. Airbnb Payment method The guests add billing information at the end of the listing selection, and the payment can be made through payment methods like a credit card or Pay Pal. Payment is collected only when the host accepts the reservation or if it is an instant Book, then the payment is charged completely. The payment is released to the host only after 24 hours of guest\u2019s check-in. The payment is based on the reservation type. There are two types of reservations: Short Term Reservations All the reservations 27 nights or less come under this category; once a reservation becomes a confirmed booking, then the total cost of the reservation is charged. Long Term Reservations All the reservations over 28 nights or more come under this category; for these types of reservations, the first month down payment is charged and for the rest of the nights on a monthly basis. Security Deposit : Some property owners charge a security deposit, and the host can file a claim within 14 days of the guest check-out period.","title":"Airbnb"},{"location":"explanation_docs/Airbnb/#purpose","text":"The purpose of this document is to provide newbies to Airbnb, an insight into its working model. This document provides a general idea of how Airbnb works for the two parties, i.e.,Guests (who rent the place) and Hosts (who rent their place out).","title":"Purpose"},{"location":"explanation_docs/Airbnb/#airbnb","text":"","title":"Airbnb"},{"location":"explanation_docs/Airbnb/#introduction","text":"AirBedandBreakfast, commonly referred to Airbnb, is a global online hospitality service provider whose services can be accessed through the website and mobile platforms. It operates in 190+ countries in nearly 100,000 cities with 6 million+ listings. It is not a real estate company but an online market place where it connects hosts with the guests. This platform can be used for listing as well as renting the property.","title":"Introduction"},{"location":"explanation_docs/Airbnb/#airbnb-working-model","text":"It started as a customer innovation by creating a new market for people who rent rooms in other\u2019s houses. Before Airbnb, it was inconceivable to allow a stranger to share the space. So, Airbnb came up with Trust by design model. It uses a robust system of identity verification and reviews for both hosts and guests. The review system is the center of the trust solution that previous sites lacked.","title":"Airbnb Working Model"},{"location":"explanation_docs/Airbnb/#airbnb-working-model-for-hosts","text":"After creating an account with Airbnb, hosts can post their property listing by providing details like amenities, rules, and house types. They can decide on the price of the listing based on Airbnb recommendations. The hosts get the review based on the service provided, and if they get consistently high reviews, they become super hosts. Hosts can also list their houses under a specialty listing category. These houses should have a unique style and high quality to get under this listing. To get into this listing, hosts need to apply, and an in-person inspection is conducted. When all the requirements are met, a special plus badge is given for differentiating these listings from the standard ones. Airbnb hosts can also become a tour guide but creating an Experience like city-tour, hike, tasting local kitchen, and more.","title":"Airbnb working model for hosts"},{"location":"explanation_docs/Airbnb/#airbnb-working-model-for-guests","text":"After creating a free account, guests can browse through a variety of options available and select the one that suits them. If a guest is creating an account for the first time, a driver\u2019s license is required. Guests can search for lodging based on their requirements using filters like date of their check-in /check-out, location, number of guests, price range, and Room-type. Using Request a book feature, they can book the listing and wait for the host\u2019s approval. If the guest wants to book a listing immediately, they can use the Instant book feature without waiting for the host\u2019s approval. Guests can also chat with the hosts. Guests can also book some fun experiences like city-tours, wine-tasting, yoga classes, and more by using the Experiences filter option. Guests can find a unique place that fits their criteria for specific occasions like weddings, official trips, dinner parties, and more using Airbnb Collections feature and also look for special plus badge houses.","title":"Airbnb working model for guests"},{"location":"explanation_docs/Airbnb/#airbnb-payment-method","text":"The guests add billing information at the end of the listing selection, and the payment can be made through payment methods like a credit card or Pay Pal. Payment is collected only when the host accepts the reservation or if it is an instant Book, then the payment is charged completely. The payment is released to the host only after 24 hours of guest\u2019s check-in. The payment is based on the reservation type. There are two types of reservations:","title":"Airbnb Payment method"},{"location":"explanation_docs/Airbnb/#short-term-reservations","text":"All the reservations 27 nights or less come under this category; once a reservation becomes a confirmed booking, then the total cost of the reservation is charged.","title":"Short Term Reservations"},{"location":"explanation_docs/Airbnb/#long-term-reservations","text":"All the reservations over 28 nights or more come under this category; for these types of reservations, the first month down payment is charged and for the rest of the nights on a monthly basis. Security Deposit : Some property owners charge a security deposit, and the host can file a claim within 14 days of the guest check-out period.","title":"Long Term Reservations"},{"location":"explanation_docs/QR_codes_explained/","text":"QR Codes Explained Overview This article will help you undertand: What a QR code is How QR codes work The pros of using QR codes The different types of QR codes The components of QR codes Where you can create QR codes About QR codes A Quick Response (QR) code is an interactive two-dimensional barcode that compresses data into a small scannable box, consisting of small patterned squares and dots encoded with pieces of information . QR codes help you access information easily and quickly. All you need to do is scan a QR code with a smartphone or tablet , and it will direct you to a webpage, video, message, calendar event, or phone number. You can place and find QR codes on banners, business cards, leaflets, public posters, and more. How QR codes work Many smart devices (e.g., iPhone, Android, tablets, etc.) have integrated QR readers into the camera feature or offer QR reader applications for download to scan QR codes. After you scan a QR code with a smart device, it will notify you that the QR code has been found and direct you to the desired information. You can scan QR codes vertically, horizontally, or at any angle due to their two-dimensional design. Advantages of QR codes QR codes are used as a shortcut to access information easily and quickly. Unlike barcodes, QR codes do not need a specific machine to be read, just a smart device. QR codes provide a digital dimension to businesses, products, and marketing because products and services can be promoted and shared through QR codes, which can help improve engagement and conversions. In comparison to traditional barcodes, QR codes are reliable. QR codes can function while impaired because they have a built-in error correction in the design, which means that even when the QR code gets damaged, it will find the correct redirection. QR codes types QR codes can either be static or dynamic . Static and dynamic QR codes are dissimilar and used for different purposes. Static QR codes provide limited functionality, while dynamic QR codes do not . Learn about the differences and use cases of both below. Static QR codes Static QR codes are permanent or fixed , which means that after you generate a QR code, the encoded data cannot be changed or updated. Also, you cannot track metrics for static QR codes; this would include: Total number of scans Unique visitors Location of scans Device type The average total of scans per day Although static QR codes provide limited functionality, they are helpful for personal use\u2014such as resumes or business cards\u2014and temporary marketing campaigns. Dynamic QR codes Dynamic QR codes can be modified even after you generate them. They also scan and load faster in comparison to static QR codes. Metrics for dynamic QR codes can be tracked, which can help businesses and marketers better understand their audience. Furthermore, dynamic QR codes are great for restaurants, the hospitality industry, government agencies, and other business types that need to collect data and periodically update QR codes. A breakdown of QR code components QR codes consist of six different parts that play a role in the functionality: Quiet Zone: A white border surrounding the QR code\u2014prevents a QR reader from interpreting anything outside the code. Finder Pattern: A pattern with three black squares located in three corners of a QR code, minus the bottom right corner. The squares inform a QR reader that it is viewing a QR code. Alignment Pattern: A smaller square located near the bottom right corner. The alignment pattern ensures that you can read a QR code in any orientation. Timing Pattern: An L-shaped line that passes between the finder pattern. The timing pattern helps a QR reader identify the squares even if the QR code is damaged. Version Information: This is the top right finder pattern square\u2014it helps identify the version of a QR code to a QR reader. Data Cells: These are the small squares within the QR code that contain information (e.g., a URL, phone number, message, etc.). Creating QR codes Anyone can create QR codes through an online QR code generator, such as: QR Code Generator uQR.me QRCode Monkey There are an array of QR code generators that you can use. It is essential to use a QR code generator that works best for you and your needs. Some QR code generators ensure a lifetime of unlimited scans, custom designs and colors, free commercial usage, performance tracking, and more. Conduct research and compare different QR code generators before deciding on one.","title":"QR Codes Explained"},{"location":"explanation_docs/QR_codes_explained/#qr-codes-explained","text":"","title":"QR Codes Explained"},{"location":"explanation_docs/QR_codes_explained/#overview","text":"This article will help you undertand: What a QR code is How QR codes work The pros of using QR codes The different types of QR codes The components of QR codes Where you can create QR codes","title":"Overview"},{"location":"explanation_docs/QR_codes_explained/#about-qr-codes","text":"A Quick Response (QR) code is an interactive two-dimensional barcode that compresses data into a small scannable box, consisting of small patterned squares and dots encoded with pieces of information . QR codes help you access information easily and quickly. All you need to do is scan a QR code with a smartphone or tablet , and it will direct you to a webpage, video, message, calendar event, or phone number. You can place and find QR codes on banners, business cards, leaflets, public posters, and more.","title":"About QR codes"},{"location":"explanation_docs/QR_codes_explained/#how-qr-codes-work","text":"Many smart devices (e.g., iPhone, Android, tablets, etc.) have integrated QR readers into the camera feature or offer QR reader applications for download to scan QR codes. After you scan a QR code with a smart device, it will notify you that the QR code has been found and direct you to the desired information. You can scan QR codes vertically, horizontally, or at any angle due to their two-dimensional design.","title":"How QR codes work"},{"location":"explanation_docs/QR_codes_explained/#advantages-of-qr-codes","text":"QR codes are used as a shortcut to access information easily and quickly. Unlike barcodes, QR codes do not need a specific machine to be read, just a smart device. QR codes provide a digital dimension to businesses, products, and marketing because products and services can be promoted and shared through QR codes, which can help improve engagement and conversions. In comparison to traditional barcodes, QR codes are reliable. QR codes can function while impaired because they have a built-in error correction in the design, which means that even when the QR code gets damaged, it will find the correct redirection.","title":"Advantages of QR codes"},{"location":"explanation_docs/QR_codes_explained/#qr-codes-types","text":"QR codes can either be static or dynamic . Static and dynamic QR codes are dissimilar and used for different purposes. Static QR codes provide limited functionality, while dynamic QR codes do not . Learn about the differences and use cases of both below.","title":"QR codes types"},{"location":"explanation_docs/QR_codes_explained/#static-qr-codes","text":"Static QR codes are permanent or fixed , which means that after you generate a QR code, the encoded data cannot be changed or updated. Also, you cannot track metrics for static QR codes; this would include: Total number of scans Unique visitors Location of scans Device type The average total of scans per day Although static QR codes provide limited functionality, they are helpful for personal use\u2014such as resumes or business cards\u2014and temporary marketing campaigns.","title":"Static QR codes"},{"location":"explanation_docs/QR_codes_explained/#dynamic-qr-codes","text":"Dynamic QR codes can be modified even after you generate them. They also scan and load faster in comparison to static QR codes. Metrics for dynamic QR codes can be tracked, which can help businesses and marketers better understand their audience. Furthermore, dynamic QR codes are great for restaurants, the hospitality industry, government agencies, and other business types that need to collect data and periodically update QR codes.","title":"Dynamic QR codes"},{"location":"explanation_docs/QR_codes_explained/#a-breakdown-of-qr-code-components","text":"QR codes consist of six different parts that play a role in the functionality: Quiet Zone: A white border surrounding the QR code\u2014prevents a QR reader from interpreting anything outside the code. Finder Pattern: A pattern with three black squares located in three corners of a QR code, minus the bottom right corner. The squares inform a QR reader that it is viewing a QR code. Alignment Pattern: A smaller square located near the bottom right corner. The alignment pattern ensures that you can read a QR code in any orientation. Timing Pattern: An L-shaped line that passes between the finder pattern. The timing pattern helps a QR reader identify the squares even if the QR code is damaged. Version Information: This is the top right finder pattern square\u2014it helps identify the version of a QR code to a QR reader. Data Cells: These are the small squares within the QR code that contain information (e.g., a URL, phone number, message, etc.).","title":"A breakdown of QR code components"},{"location":"explanation_docs/QR_codes_explained/#creating-qr-codes","text":"Anyone can create QR codes through an online QR code generator, such as: QR Code Generator uQR.me QRCode Monkey There are an array of QR code generators that you can use. It is essential to use a QR code generator that works best for you and your needs. Some QR code generators ensure a lifetime of unlimited scans, custom designs and colors, free commercial usage, performance tracking, and more. Conduct research and compare different QR code generators before deciding on one.","title":"Creating QR codes"},{"location":"how-to_guides/SwaggerOpenAPI/","text":"Swagger Introduction & Examples Quick Start OpenAPI & Swagger OpenAPI Swagger Why Use OpenAPI? Introduction to OpenAPI Specification Basic Structure Metadata Base URL Consumes, Produces Paths Parameters Responses Input and Output Models Authentication Introduction to Swagger Open Source Tools Swagger Editor Swagger Codegen Swagger UI asciidoctor Quick Start install: after git clone, execute commands below in root directory: swagger-server/bin/install.sh doing that will produce some client SDKs, server code, asciidoc and html documents, look like this: +---asciidoc //asciidoc document +---client //auto Generated client SDKs | +---go //-- client SDK in go programming language | +---html2 //-- html document | \\---java //-- client SDK in java programming language +---docs //html document | swagger-example.html +---server //auto generated server code | +---jaxrs-resteasy //-- jaxrs server code that uses resteasy | \\---spring //-- server code that uses spring mvc \\---swagger-server // example run swagger-server\uff1a java -jar swagger-server/target/swagger-server-${version}.jar explore: swagger.json: http://127.0.0.1:8080/v2/api-docs swagger-ui: http://127.0.0.1:8080/swagger-ui.html swagger-ui looks like this: Introduction to OpenAPI & Swagger Open Source Tools OpenAPI & Swagger OpenAPI OpenAPI Specification (formerly Swagger Specification) is an API description format for REST APIs. An OpenAPI file allows you to describe your entire API, including: Available endpoints ( /users ) and operations on each endpoint ( GET /users , POST /users ) Operation parameters Input and output for each operation Authentication methods Contact information, license, terms of use and other information. API specifications can be written in YAML or JSON. The format is easy to learn and readable to both humans and machines. The complete OpenAPI Specification can be found on GitHub: OpenAPI 2.0 Specification , OpenAPI 3.0 Specification Swagger Swagger is a set of open-source tools built around the OpenAPI Specification that can help you design, build, document and consume REST APIs. The major Swagger tools include: Swagger Editor \u2013 browser-based editor where you can write OpenAPI specs. Swagger Codegen \u2013 generates server stubs and client libraries from an OpenAPI spec. Swagger UI \u2013 renders OpenAPI specs as interactive API documentation. Why Use OpenAPI? The ability of APIs to describe their own structure is the root of all awesomeness in OpenAPI. Once written, an OpenAPI specification and Swagger tools can drive your API development further in various ways: Design-first users: use Swagger Codegen to generate a server stub for your API. The only thing left is to implement the server logic \u2013 and your API is ready to go live! Use Swagger Codegen to generate client libraries for your API in over 40 languages. Use Swagger UI to generate interactive API documentation that lets your users try out the API calls directly in the browser. Use the spec to connect API-related tools to your API. For example, import the spec to SoapUI to create automated tests for your API. And more! Check out the open-source tools that integrate with Swagger. Introduction to OpenAPI Specification Basic Structure Swagger can be written in JSON or YAML. In this guide, we only use YAML examples, but JSON works equally well. A sample Swagger specification written in YAML looks like: swagger: \"2.0\" info: title: Sample API description: API description in Markdown. version: 1.0.0 host: api.example.com basePath: /v1 schemes: - https paths: /users: get: summary: Returns a list of users. description: Optional extended description in Markdown. produces: - application/json responses: 200: description: OK Metadata Every Swagger specification starts with the Swagger version, 3.0 being the latest version. A Swagger version defines the overall structure of an API specification -- what you can document and how you document it. swagger: \"2.0\" Then, you need to specify the API info -- title , description (optional), version (API version, not file revision or Swagger version). info: title: Sample API description: API description in Markdown. version: 1.0.0 version can be a random string. You can use major.minor.patch (as in semantic versioning ), or an arbitrary format like 1.0-beta or 2016.11.15. description can be multiline and supports GitHub Flavored Markdown for rich text representation. info also supports other fields for contact information, license and other details. Reference: Info Object . Base URL The base URL for all API calls is defined using schemes , host and basePath : host: api.example.com basePath: /v1 schemes: - https All API paths are relative to the base URL. For example, /users actually means *https://api.example.com/v1/users. More info*: API Host and Base URL . Consumes, Produces The consumes and produces sections define the MIME types supported by the API. The root-level definition can be overridden in individual operations. consumes: - application/json - application/xml produces: - application/json - application/xml More info : MIME Types . Paths The paths section defines individual endpoints (paths) in your API, and the HTTP methods (operations) supported by these endpoints. For example, GET /users can be described as: paths: /users: get: summary: Returns a list of users. description: Optional extended description in Markdown. produces: - application/json responses: 200: description: OK More info : Paths and Operations . Parameters Operations can have parameters that can be passed via URL path ( /users/{userId} ), query string ( /users?role=admin ), headers ( X-CustomHeader: Value ) and request body. You can define the parameter types, format, whether they are required or optional, and other details: paths: /users/{userId}: get: summary: Returns a user by ID. parameters: - in: path name: userId required: true type: integer minimum: 1 description: Parameter description in Markdown. responses: 200: description: OK More info : Describing Parameters . Responses For each operation, you can define possible status codes, such as 200 OK or 404 Not Found, and schema of the response body. Schemas can be defined inline or referenced from an external definition via $ref . You can also provide example responses for different content types. paths: /users/{userId}: get: summary: Returns a user by ID. parameters: - in: path name: userId required: true type: integer minimum: 1 description: The ID of the user to return. responses: 200: description: A User object. schema: type: object properties: id: type: integer example: 4 name: type: string example: Arthur Dent 400: description: The specified user ID is invalid (e.g. not a number). 404: description: A user with the specified ID was not found. default: description: Unexpected error More info : Describing Responses . Input and Output Models The global definitions section lets you define common data structures used in your API. They can be referenced via $ref whenever a schema is required -- both for request body and response body. For example, this JSON object: { \"id\": 4, \"name\": \"Arthur Dent\" } can be represented as: definitions: User: properties: id: type: integer name: type: string # Both properties are required required: - id - name and then referenced in the request body schema and response body schema as follows: paths: /users/{userId}: get: summary: Returns a user by ID. parameters: - in: path name: userId required: true type: integer responses: 200: description: OK schema: $ref: \"#/definitions/User\" /users: post: summary: Creates a new user. parameters: - in: body name: user schema: $ref: \"#/definitions/User\" responses: 200: description: OK Authentication The securityDefinitions and security keywords are used to describe the authentication methods used in your API. securityDefinitions: BasicAuth: type: basic security: - BasicAuth: [] Supported authentication methods are: Basic authentication API key (as a header or query parameter) OAuth 2 common flows (implicit, password, application and access code) More info : Authentication . Introduction to Swagger Open Source Tools Swagger Editor Design, describe, and document your API on the first open source editor fully dedicated to OpenAPI-based APIs. The Swagger Editor is great for quickly getting started with the OpenAPI (formerly known as the Swagger Specification) specification, with support for Swagger 2.0 and OpenAPI 3.0. Runs Anywhere: The Editor works in any development environment, be it locally or in the web Smart Feedback: Validate your syntax for OAS-compliance as you write it with concise feedback and error handling Instant Visualization: Render your API specification visually and interact with your API while still defining it Intelligent Auto-completion: Write syntax faster with a smart and intelligent auto-completion Fully Customizable: Easy to configure and customize anything, from line-spacing to themes All About Your Build: Generate server stubs and client libraries for your API in every popular language Swagger Codegen Swagger Codegen can simplify your build process by generating server stubs and client SDKs for any API, defined with the OpenAPI (formerly known as Swagger) specification, so your team can focus better on your API\u2019s implementation and adoption. Generate Servers: Remove tedious plumbing and configuration by generating boilerplate server code in over 20 different languages Improve API Consumption: Generate client SDKs in over 40 different languages for end developers to easily integrate with your API Continuously Improved: Swagger Codegen is always updated with the latest and greatest changes in the programming world Swagger UI Swagger UI allows anyone \u2014 be it your development team or your end consumers \u2014 to visualize and interact with the API\u2019s resources without having any of the implementation logic in place. It\u2019s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption. Dependency Free: The UI works in any development environment, be it locally or in the web Human Friendly: Allow end developers to effortlessly interact and try out every single operation your API exposes for easy consumption Easy to Navigate: Quickly find and work with resources and endpoints with neatly categorized documentation All Browser Support: Cater to every possible scenario with Swagger UI working in all major browsers Fully Customizable: Style and tweak your Swagger UI the way you want with full source code access Complete OAS Support: Visualize APIs defined in Swagger 2.0 or OAS 3.0 asciidoctor asciidoc asciidoctor Asciidoctor is a fast text processor and publishing toolchain for converting AsciiDoc content to HTML5, DocBook, PDF, and other formats. Asciidoctor is written in Ruby, packaged and distributed as a gem to RubyGems.org , and packaged for popular Linux distributions, including Fedora, Debian, Ubuntu, and Alpine. Asciidoctor can be run on the JVM using AsciidoctorJ and in all JavaScript environments using Asciidoctor.js. Asciidoctor is open source software and hosted on GitHub .","title":"Swagger Introduction & Examples"},{"location":"how-to_guides/SwaggerOpenAPI/#swagger-introduction-examples","text":"Quick Start OpenAPI & Swagger OpenAPI Swagger Why Use OpenAPI? Introduction to OpenAPI Specification Basic Structure Metadata Base URL Consumes, Produces Paths Parameters Responses Input and Output Models Authentication Introduction to Swagger Open Source Tools Swagger Editor Swagger Codegen Swagger UI asciidoctor","title":"Swagger Introduction &amp; Examples"},{"location":"how-to_guides/SwaggerOpenAPI/#quick-start","text":"install: after git clone, execute commands below in root directory: swagger-server/bin/install.sh doing that will produce some client SDKs, server code, asciidoc and html documents, look like this: +---asciidoc //asciidoc document +---client //auto Generated client SDKs | +---go //-- client SDK in go programming language | +---html2 //-- html document | \\---java //-- client SDK in java programming language +---docs //html document | swagger-example.html +---server //auto generated server code | +---jaxrs-resteasy //-- jaxrs server code that uses resteasy | \\---spring //-- server code that uses spring mvc \\---swagger-server // example run swagger-server\uff1a java -jar swagger-server/target/swagger-server-${version}.jar explore: swagger.json: http://127.0.0.1:8080/v2/api-docs swagger-ui: http://127.0.0.1:8080/swagger-ui.html swagger-ui looks like this:","title":"Quick Start"},{"location":"how-to_guides/SwaggerOpenAPI/#introduction-to-openapi-swagger-open-source-tools","text":"","title":"Introduction to OpenAPI &amp; Swagger Open Source Tools"},{"location":"how-to_guides/SwaggerOpenAPI/#openapi-swagger","text":"","title":"OpenAPI &amp; Swagger"},{"location":"how-to_guides/SwaggerOpenAPI/#openapi","text":"OpenAPI Specification (formerly Swagger Specification) is an API description format for REST APIs. An OpenAPI file allows you to describe your entire API, including: Available endpoints ( /users ) and operations on each endpoint ( GET /users , POST /users ) Operation parameters Input and output for each operation Authentication methods Contact information, license, terms of use and other information. API specifications can be written in YAML or JSON. The format is easy to learn and readable to both humans and machines. The complete OpenAPI Specification can be found on GitHub: OpenAPI 2.0 Specification , OpenAPI 3.0 Specification","title":"OpenAPI"},{"location":"how-to_guides/SwaggerOpenAPI/#swagger","text":"Swagger is a set of open-source tools built around the OpenAPI Specification that can help you design, build, document and consume REST APIs. The major Swagger tools include: Swagger Editor \u2013 browser-based editor where you can write OpenAPI specs. Swagger Codegen \u2013 generates server stubs and client libraries from an OpenAPI spec. Swagger UI \u2013 renders OpenAPI specs as interactive API documentation.","title":"Swagger"},{"location":"how-to_guides/SwaggerOpenAPI/#why-use-openapi","text":"The ability of APIs to describe their own structure is the root of all awesomeness in OpenAPI. Once written, an OpenAPI specification and Swagger tools can drive your API development further in various ways: Design-first users: use Swagger Codegen to generate a server stub for your API. The only thing left is to implement the server logic \u2013 and your API is ready to go live! Use Swagger Codegen to generate client libraries for your API in over 40 languages. Use Swagger UI to generate interactive API documentation that lets your users try out the API calls directly in the browser. Use the spec to connect API-related tools to your API. For example, import the spec to SoapUI to create automated tests for your API. And more! Check out the open-source tools that integrate with Swagger.","title":"Why Use OpenAPI?"},{"location":"how-to_guides/SwaggerOpenAPI/#introduction-to-openapi-specification","text":"","title":"Introduction to OpenAPI Specification"},{"location":"how-to_guides/SwaggerOpenAPI/#basic-structure","text":"Swagger can be written in JSON or YAML. In this guide, we only use YAML examples, but JSON works equally well. A sample Swagger specification written in YAML looks like: swagger: \"2.0\" info: title: Sample API description: API description in Markdown. version: 1.0.0 host: api.example.com basePath: /v1 schemes: - https paths: /users: get: summary: Returns a list of users. description: Optional extended description in Markdown. produces: - application/json responses: 200: description: OK","title":"Basic Structure"},{"location":"how-to_guides/SwaggerOpenAPI/#metadata","text":"Every Swagger specification starts with the Swagger version, 3.0 being the latest version. A Swagger version defines the overall structure of an API specification -- what you can document and how you document it. swagger: \"2.0\" Then, you need to specify the API info -- title , description (optional), version (API version, not file revision or Swagger version). info: title: Sample API description: API description in Markdown. version: 1.0.0 version can be a random string. You can use major.minor.patch (as in semantic versioning ), or an arbitrary format like 1.0-beta or 2016.11.15. description can be multiline and supports GitHub Flavored Markdown for rich text representation. info also supports other fields for contact information, license and other details. Reference: Info Object .","title":"Metadata"},{"location":"how-to_guides/SwaggerOpenAPI/#base-url","text":"The base URL for all API calls is defined using schemes , host and basePath : host: api.example.com basePath: /v1 schemes: - https All API paths are relative to the base URL. For example, /users actually means *https://api.example.com/v1/users. More info*: API Host and Base URL .","title":"Base URL"},{"location":"how-to_guides/SwaggerOpenAPI/#consumes-produces","text":"The consumes and produces sections define the MIME types supported by the API. The root-level definition can be overridden in individual operations. consumes: - application/json - application/xml produces: - application/json - application/xml More info : MIME Types .","title":"Consumes, Produces"},{"location":"how-to_guides/SwaggerOpenAPI/#paths","text":"The paths section defines individual endpoints (paths) in your API, and the HTTP methods (operations) supported by these endpoints. For example, GET /users can be described as: paths: /users: get: summary: Returns a list of users. description: Optional extended description in Markdown. produces: - application/json responses: 200: description: OK More info : Paths and Operations .","title":"Paths"},{"location":"how-to_guides/SwaggerOpenAPI/#parameters","text":"Operations can have parameters that can be passed via URL path ( /users/{userId} ), query string ( /users?role=admin ), headers ( X-CustomHeader: Value ) and request body. You can define the parameter types, format, whether they are required or optional, and other details: paths: /users/{userId}: get: summary: Returns a user by ID. parameters: - in: path name: userId required: true type: integer minimum: 1 description: Parameter description in Markdown. responses: 200: description: OK More info : Describing Parameters .","title":"Parameters"},{"location":"how-to_guides/SwaggerOpenAPI/#responses","text":"For each operation, you can define possible status codes, such as 200 OK or 404 Not Found, and schema of the response body. Schemas can be defined inline or referenced from an external definition via $ref . You can also provide example responses for different content types. paths: /users/{userId}: get: summary: Returns a user by ID. parameters: - in: path name: userId required: true type: integer minimum: 1 description: The ID of the user to return. responses: 200: description: A User object. schema: type: object properties: id: type: integer example: 4 name: type: string example: Arthur Dent 400: description: The specified user ID is invalid (e.g. not a number). 404: description: A user with the specified ID was not found. default: description: Unexpected error More info : Describing Responses .","title":"Responses"},{"location":"how-to_guides/SwaggerOpenAPI/#input-and-output-models","text":"The global definitions section lets you define common data structures used in your API. They can be referenced via $ref whenever a schema is required -- both for request body and response body. For example, this JSON object: { \"id\": 4, \"name\": \"Arthur Dent\" } can be represented as: definitions: User: properties: id: type: integer name: type: string # Both properties are required required: - id - name and then referenced in the request body schema and response body schema as follows: paths: /users/{userId}: get: summary: Returns a user by ID. parameters: - in: path name: userId required: true type: integer responses: 200: description: OK schema: $ref: \"#/definitions/User\" /users: post: summary: Creates a new user. parameters: - in: body name: user schema: $ref: \"#/definitions/User\" responses: 200: description: OK","title":"Input and Output Models"},{"location":"how-to_guides/SwaggerOpenAPI/#authentication","text":"The securityDefinitions and security keywords are used to describe the authentication methods used in your API. securityDefinitions: BasicAuth: type: basic security: - BasicAuth: [] Supported authentication methods are: Basic authentication API key (as a header or query parameter) OAuth 2 common flows (implicit, password, application and access code) More info : Authentication .","title":"Authentication"},{"location":"how-to_guides/SwaggerOpenAPI/#introduction-to-swagger-open-source-tools","text":"","title":"Introduction to Swagger Open Source Tools"},{"location":"how-to_guides/SwaggerOpenAPI/#swagger-editor","text":"Design, describe, and document your API on the first open source editor fully dedicated to OpenAPI-based APIs. The Swagger Editor is great for quickly getting started with the OpenAPI (formerly known as the Swagger Specification) specification, with support for Swagger 2.0 and OpenAPI 3.0. Runs Anywhere: The Editor works in any development environment, be it locally or in the web Smart Feedback: Validate your syntax for OAS-compliance as you write it with concise feedback and error handling Instant Visualization: Render your API specification visually and interact with your API while still defining it Intelligent Auto-completion: Write syntax faster with a smart and intelligent auto-completion Fully Customizable: Easy to configure and customize anything, from line-spacing to themes All About Your Build: Generate server stubs and client libraries for your API in every popular language","title":"Swagger Editor"},{"location":"how-to_guides/SwaggerOpenAPI/#swagger-codegen","text":"Swagger Codegen can simplify your build process by generating server stubs and client SDKs for any API, defined with the OpenAPI (formerly known as Swagger) specification, so your team can focus better on your API\u2019s implementation and adoption. Generate Servers: Remove tedious plumbing and configuration by generating boilerplate server code in over 20 different languages Improve API Consumption: Generate client SDKs in over 40 different languages for end developers to easily integrate with your API Continuously Improved: Swagger Codegen is always updated with the latest and greatest changes in the programming world","title":"Swagger Codegen"},{"location":"how-to_guides/SwaggerOpenAPI/#swagger-ui","text":"Swagger UI allows anyone \u2014 be it your development team or your end consumers \u2014 to visualize and interact with the API\u2019s resources without having any of the implementation logic in place. It\u2019s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption. Dependency Free: The UI works in any development environment, be it locally or in the web Human Friendly: Allow end developers to effortlessly interact and try out every single operation your API exposes for easy consumption Easy to Navigate: Quickly find and work with resources and endpoints with neatly categorized documentation All Browser Support: Cater to every possible scenario with Swagger UI working in all major browsers Fully Customizable: Style and tweak your Swagger UI the way you want with full source code access Complete OAS Support: Visualize APIs defined in Swagger 2.0 or OAS 3.0","title":"Swagger UI"},{"location":"how-to_guides/SwaggerOpenAPI/#asciidoctor","text":"asciidoc asciidoctor Asciidoctor is a fast text processor and publishing toolchain for converting AsciiDoc content to HTML5, DocBook, PDF, and other formats. Asciidoctor is written in Ruby, packaged and distributed as a gem to RubyGems.org , and packaged for popular Linux distributions, including Fedora, Debian, Ubuntu, and Alpine. Asciidoctor can be run on the JVM using AsciidoctorJ and in all JavaScript environments using Asciidoctor.js. Asciidoctor is open source software and hosted on GitHub .","title":"asciidoctor"},{"location":"how-to_guides/Tic-Tac-Toe/","text":"Purpose The purpose of this document is to introduce this game to someone who never heard about this game (assuming an intelligent person never heard about this game). Tic-Tac-Toe Introduction Tic Tac Toe is a board game played at any time by two players with a paper and pencil. It is also called Noughts (O) and Crosses (X) in British English. This is a Zero-sum game. If the opponent knows your move, you cannot win the game. If both the opponents play with an optimal strategy, the game will always end in a tie. This game involves looking ahead and trying to figure out what the person against you might do next.This is also a game of chance. Goal The goal of this game is to be the first player to get three marks in a row (horizontally, vertically, or diagonally).This game can have only three outcomes. Number of Players: 2 Four players can also play Tic-Tac-Toe, which is an advanced version of this game. Tools: Pen/Pencil, Paper Rules Two players play this game. This game is played by drawing a 3X3 grid of squares (three by three squares) on a piece of paper. Players choose their marks X or O . By alternating, each player picks a space. The first player to get the marks in a row (horizontally, vertically, diagonally) wins the game. The game is over when all the nine squares are filled. If the game ends without a win for any of the players, it is a TIE. How to play Following are the steps to play Tic-Tac-Toe: On a piece of paper, draw a 3X3 grid of squares, which means it has three rows and three columns, as shown in the image below. Toss a coin to see which player goes first. Players take alternate turns. They fill in the girds with their chosen mark X or O \u2019s, as shown in the image below. The players play till all the grids are filled with X or O \u2019s as shown in the image below. The player who first succeeds in placing the marks horizontal, vertical, or diagonal row wins the game, as shown in the image below. If all the squares are filled, and none of the players were able to make three marks in a row (horizontally, vertically, or diagonally),then the game ends in a tie.","title":"Tic Tac Toe"},{"location":"how-to_guides/Tic-Tac-Toe/#purpose","text":"The purpose of this document is to introduce this game to someone who never heard about this game (assuming an intelligent person never heard about this game).","title":"Purpose"},{"location":"how-to_guides/Tic-Tac-Toe/#tic-tac-toe","text":"","title":"Tic-Tac-Toe"},{"location":"how-to_guides/Tic-Tac-Toe/#introduction","text":"Tic Tac Toe is a board game played at any time by two players with a paper and pencil. It is also called Noughts (O) and Crosses (X) in British English. This is a Zero-sum game. If the opponent knows your move, you cannot win the game. If both the opponents play with an optimal strategy, the game will always end in a tie. This game involves looking ahead and trying to figure out what the person against you might do next.This is also a game of chance.","title":"Introduction"},{"location":"how-to_guides/Tic-Tac-Toe/#goal","text":"The goal of this game is to be the first player to get three marks in a row (horizontally, vertically, or diagonally).This game can have only three outcomes. Number of Players: 2 Four players can also play Tic-Tac-Toe, which is an advanced version of this game. Tools: Pen/Pencil, Paper","title":"Goal"},{"location":"how-to_guides/Tic-Tac-Toe/#rules","text":"Two players play this game. This game is played by drawing a 3X3 grid of squares (three by three squares) on a piece of paper. Players choose their marks X or O . By alternating, each player picks a space. The first player to get the marks in a row (horizontally, vertically, diagonally) wins the game. The game is over when all the nine squares are filled. If the game ends without a win for any of the players, it is a TIE.","title":"Rules"},{"location":"how-to_guides/Tic-Tac-Toe/#how-to-play","text":"Following are the steps to play Tic-Tac-Toe: On a piece of paper, draw a 3X3 grid of squares, which means it has three rows and three columns, as shown in the image below. Toss a coin to see which player goes first. Players take alternate turns. They fill in the girds with their chosen mark X or O \u2019s, as shown in the image below. The players play till all the grids are filled with X or O \u2019s as shown in the image below. The player who first succeeds in placing the marks horizontal, vertical, or diagonal row wins the game, as shown in the image below. If all the squares are filled, and none of the players were able to make three marks in a row (horizontally, vertically, or diagonally),then the game ends in a tie.","title":"How to play"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/","text":"How to Create and Push Files to a Remote Repository Overview This how-to article covers instructions for creating and pushing new files to a remote repository using the command line. Before you start Before you start, make sure you meet these prerequisites: Have a GitHub account Have Git installed and configured on your local computer Have a repository created and cloned to your local computer Have a text editor downloaded on your local computer (e.g., VS Code, Atom, etc.) Step-by-step guide Step 1: Open your terminal Open your local computer's terminal or use your text editor's built-in terminal to run commands. Step 2: Open your cloned repository Perform the following steps to locate and open your cloned repository: See your current local path on your computer by running the pwd command. Run ls to see your cloned repository listed. To go open your cloned repository, run cd followed by the name of the cloned repository. >:$ cd <cloned_repo_name> Re-run pwd to validate that you have opened your cloned repository. Step 3: Validate your Git configuration settings Check your Git configuration settings on your local computer by running the git config -l command. The output should list your Git username, email, along with other details. >:$ git config -l credential.helper=osxkeychain user.name=<gitusername> user.email=<gitemail> core.editor=vs code --wait core.excludesfile=/Users/kaylamorales/.gitignore_global color.ui=true difftool.sourcetree.cmd=opendiff \"$LOCAL\" \"$REMOTE\" difftool.sourcetree.path= mergetool.sourcetree.cmd=/Users/<computername>/Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\" mergetool.sourcetree.trustexitcode=true commit.template=/Users/<computername>/.stCommitMsg filter.lfs.process=git-lfs filter-process filter.lfs.required=true \ud83d\udea9 NOTE : Your output may not exactly replicate the example shown above. Step 4: Create a new file To create a new file in your cloned repository, run the touch command followed by the filename you're giving it. >:$ git touch hello_world.md Step 5: Stage your file Upon creating the file and making changes (if applicable), it's time to stage it by running the git add . command. >:$ git add . You will not see an output after running the command. Step 6: Commit your file Next, save your file and its changes by running git commit -m \"<message>\" . Within the quotation marks, enter a brief description of your file. >:$ git commit -m \"Initial commit\" Afterward, you should see a similar output: [main a50f2b4] Initial commit. 1 file changed, 104 insertions(+), 31 deletions(-) rewrite How-to-Guides/hello_world.md (87%) Step 6: Push the file to your remote repository Now that you've committed your file run git push to publish your changes to your remote repository (GitHub.com). See also Signing up for a new GitHub account 1.5 Getting Started - Installing Git 1.6 Getting Started - First-Time Git Setup Create a repo Cloning a repository","title":"How to Create and Push Files to a Remote Repository"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#how-to-create-and-push-files-to-a-remote-repository","text":"","title":"How to Create and Push Files to a Remote Repository"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#overview","text":"This how-to article covers instructions for creating and pushing new files to a remote repository using the command line.","title":"Overview"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#before-you-start","text":"Before you start, make sure you meet these prerequisites: Have a GitHub account Have Git installed and configured on your local computer Have a repository created and cloned to your local computer Have a text editor downloaded on your local computer (e.g., VS Code, Atom, etc.)","title":"Before you start"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-by-step-guide","text":"","title":"Step-by-step guide"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-1-open-your-terminal","text":"Open your local computer's terminal or use your text editor's built-in terminal to run commands.","title":"Step 1: Open your terminal"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-2-open-your-cloned-repository","text":"Perform the following steps to locate and open your cloned repository: See your current local path on your computer by running the pwd command. Run ls to see your cloned repository listed. To go open your cloned repository, run cd followed by the name of the cloned repository. >:$ cd <cloned_repo_name> Re-run pwd to validate that you have opened your cloned repository.","title":"Step 2: Open your cloned repository"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-3-validate-your-git-configuration-settings","text":"Check your Git configuration settings on your local computer by running the git config -l command. The output should list your Git username, email, along with other details. >:$ git config -l credential.helper=osxkeychain user.name=<gitusername> user.email=<gitemail> core.editor=vs code --wait core.excludesfile=/Users/kaylamorales/.gitignore_global color.ui=true difftool.sourcetree.cmd=opendiff \"$LOCAL\" \"$REMOTE\" difftool.sourcetree.path= mergetool.sourcetree.cmd=/Users/<computername>/Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\" mergetool.sourcetree.trustexitcode=true commit.template=/Users/<computername>/.stCommitMsg filter.lfs.process=git-lfs filter-process filter.lfs.required=true \ud83d\udea9 NOTE : Your output may not exactly replicate the example shown above.","title":"Step 3: Validate your Git configuration settings"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-4-create-a-new-file","text":"To create a new file in your cloned repository, run the touch command followed by the filename you're giving it. >:$ git touch hello_world.md","title":"Step 4: Create a new file"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-5-stage-your-file","text":"Upon creating the file and making changes (if applicable), it's time to stage it by running the git add . command. >:$ git add . You will not see an output after running the command.","title":"Step 5: Stage your file"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-6-commit-your-file","text":"Next, save your file and its changes by running git commit -m \"<message>\" . Within the quotation marks, enter a brief description of your file. >:$ git commit -m \"Initial commit\" Afterward, you should see a similar output: [main a50f2b4] Initial commit. 1 file changed, 104 insertions(+), 31 deletions(-) rewrite How-to-Guides/hello_world.md (87%)","title":"Step 6: Commit your file"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#step-6-push-the-file-to-your-remote-repository","text":"Now that you've committed your file run git push to publish your changes to your remote repository (GitHub.com).","title":"Step 6: Push the file to your remote repository"},{"location":"how-to_guides/how_to_create_and_push_files_to_a_remote_repo/#see-also","text":"Signing up for a new GitHub account 1.5 Getting Started - Installing Git 1.6 Getting Started - First-Time Git Setup Create a repo Cloning a repository","title":"See also"},{"location":"reference_guides/Git_Commands/","text":"Git Commands Reference Guide Overview This reference guide lists basic Git commands for novice users of Git. Git Commands Navigate Use the commands outlined in this section to navigate different directories (folders) or files on your local computer. Command Definition pwd This command stands for Print Working Directory . You use this command to see your current file path. pwd -p This command shows you the full file path you're currently in. cd <directory_name> This command stands for Change Directory . You use this command to enter and open a directory. Also, if you enter only cd or cd ~ , you'll be directed back to your Home folder. cd .. This command takes you to a directory above the one you're currently in. cd - This command takes you to the directory you were in before. ls This command lists all the files in a directory. ls -a This command lists all files and hidden files in a directory. ls -l This command lists all directories in a directory. Create Use the commands outlined in this section to create new files and directories. Command Definition touch <filename.extension> This command creates a new and empty file. (e.g., touch hello_world.md ) mkdir <directory_name> This command stands for Make Directory . You use this command to create a new and empty directory. (e.g., mkdir new_folder ) Miscellaneous The commands outlined in this section are helpful miscellaneous commands. Command Definition clear This command clears the contents within the terminal. git mv <old_filename> <new_filename> This command renames files. Configure Git Use the commands outlined in this section to set up and customize your Git environment on your local computer for all repositories on your computer. ( NOTE: Learn how to configure Git per repository by reading Customizing Git - Git Configuration .) Command Definition git config --global user.name \"<username>\" This command sets your Git username. git config --global user.email \"<email>\" This command sets your Git email address. Basic Workflow Use the commands outlined in this section to perform the Git workflow . Command Definition git clone This command clones a repository to your local computer by entering git clone https://github.com/uidaholib/gitworkshop.git . You can use either an HTTPS or SSH URL for cloning a repository. git status This command displays the current state of your repository and staging area. git log This command lists all recent activities. git add . This command stages your files after applying changes. The git add . command tells Git that you've made changes to a file and that you would like Git to track the file. git commit -m \"<message>\" This command saves or takes a \"snapshot\" of the changes you've made to a file. You use this command after staging the file ( add . ). Within the quotation marks, you can enter a message that describes the changes you've made to the file. git push This command pushes the changes you've made to your local files in your cloned repository into your remote (GitHub.com) repository. git push origin main This command pushes changes from a different branch to the main branch. git pull This command updates your repository by pulling updates from your remote repository and merging the updates with your local repository. git fetch This command displays changes made in your remote repository; it does not merge any changes with your local repository. Work with Remote Repositories Use the commands outlined in this section to help you start working with remote repositories. | Command | Definition | |--|--| | git remote -v | This command lists the URL of your remote repository in your terminal. The word origin will appear at the start of your remote connection or remote repository's URL; origin is the default and convention for the remote repository. | | git init <directory> | This command creates a new Git repository or can convert an existing local and unversioned directory into a Git repository. To convert a directory into a Git repository, make sure to open the directory using cd and enter git init . | | git branch --all | This command lists all the branches within your repository. | | git checkout <branch_name> | This command switches you to a different branch. | | git checkout -b <branch-name> | This command creates a new branch and switches to it at the same time. | | git switch <branch_name> | This command switches you to a different branch. (Git v2.23+) | | git switch -c <branch-name> | This command creates a new branch and switches to it at the same time. (Git v2.23+) | | git branch -d -r origin/feature/<branch> | This command deletes a local branch. | | git fetch add upstream <link> | This command adds the upstream to your forked (copied) repository, allowing you to push changes to the original repository. When adding the upstream, make sure to use the HTTPS or SSH link (whichever one you chose for cloning the forked repository to your local computer). | | git fetch upstream main | This command pulls any updates from the main branch of the forked repository to your local copy. |","title":"Git Commands Reference Guide"},{"location":"reference_guides/Git_Commands/#git-commands-reference-guide","text":"","title":"Git Commands Reference Guide"},{"location":"reference_guides/Git_Commands/#overview","text":"This reference guide lists basic Git commands for novice users of Git.","title":"Overview"},{"location":"reference_guides/Git_Commands/#git-commands","text":"","title":"Git Commands"},{"location":"reference_guides/Git_Commands/#navigate","text":"Use the commands outlined in this section to navigate different directories (folders) or files on your local computer. Command Definition pwd This command stands for Print Working Directory . You use this command to see your current file path. pwd -p This command shows you the full file path you're currently in. cd <directory_name> This command stands for Change Directory . You use this command to enter and open a directory. Also, if you enter only cd or cd ~ , you'll be directed back to your Home folder. cd .. This command takes you to a directory above the one you're currently in. cd - This command takes you to the directory you were in before. ls This command lists all the files in a directory. ls -a This command lists all files and hidden files in a directory. ls -l This command lists all directories in a directory.","title":"Navigate"},{"location":"reference_guides/Git_Commands/#create","text":"Use the commands outlined in this section to create new files and directories. Command Definition touch <filename.extension> This command creates a new and empty file. (e.g., touch hello_world.md ) mkdir <directory_name> This command stands for Make Directory . You use this command to create a new and empty directory. (e.g., mkdir new_folder )","title":"Create"},{"location":"reference_guides/Git_Commands/#miscellaneous","text":"The commands outlined in this section are helpful miscellaneous commands. Command Definition clear This command clears the contents within the terminal. git mv <old_filename> <new_filename> This command renames files.","title":"Miscellaneous"},{"location":"reference_guides/Git_Commands/#configure-git","text":"Use the commands outlined in this section to set up and customize your Git environment on your local computer for all repositories on your computer. ( NOTE: Learn how to configure Git per repository by reading Customizing Git - Git Configuration .) Command Definition git config --global user.name \"<username>\" This command sets your Git username. git config --global user.email \"<email>\" This command sets your Git email address.","title":"Configure Git"},{"location":"reference_guides/Git_Commands/#basic-workflow","text":"Use the commands outlined in this section to perform the Git workflow . Command Definition git clone This command clones a repository to your local computer by entering git clone https://github.com/uidaholib/gitworkshop.git . You can use either an HTTPS or SSH URL for cloning a repository. git status This command displays the current state of your repository and staging area. git log This command lists all recent activities. git add . This command stages your files after applying changes. The git add . command tells Git that you've made changes to a file and that you would like Git to track the file. git commit -m \"<message>\" This command saves or takes a \"snapshot\" of the changes you've made to a file. You use this command after staging the file ( add . ). Within the quotation marks, you can enter a message that describes the changes you've made to the file. git push This command pushes the changes you've made to your local files in your cloned repository into your remote (GitHub.com) repository. git push origin main This command pushes changes from a different branch to the main branch. git pull This command updates your repository by pulling updates from your remote repository and merging the updates with your local repository. git fetch This command displays changes made in your remote repository; it does not merge any changes with your local repository.","title":"Basic Workflow"},{"location":"reference_guides/Git_Commands/#work-with-remote-repositories","text":"Use the commands outlined in this section to help you start working with remote repositories. | Command | Definition | |--|--| | git remote -v | This command lists the URL of your remote repository in your terminal. The word origin will appear at the start of your remote connection or remote repository's URL; origin is the default and convention for the remote repository. | | git init <directory> | This command creates a new Git repository or can convert an existing local and unversioned directory into a Git repository. To convert a directory into a Git repository, make sure to open the directory using cd and enter git init . | | git branch --all | This command lists all the branches within your repository. | | git checkout <branch_name> | This command switches you to a different branch. | | git checkout -b <branch-name> | This command creates a new branch and switches to it at the same time. | | git switch <branch_name> | This command switches you to a different branch. (Git v2.23+) | | git switch -c <branch-name> | This command creates a new branch and switches to it at the same time. (Git v2.23+) | | git branch -d -r origin/feature/<branch> | This command deletes a local branch. | | git fetch add upstream <link> | This command adds the upstream to your forked (copied) repository, allowing you to push changes to the original repository. When adding the upstream, make sure to use the HTTPS or SSH link (whichever one you chose for cloning the forked repository to your local computer). | | git fetch upstream main | This command pulls any updates from the main branch of the forked repository to your local copy. |","title":"Work with Remote Repositories"},{"location":"reference_guides/Quick-Reference-Guide/","text":"Purpose The purpose of this document is to provide instructions on how to install and use a new LED Sensor light. Introduction OWL LED Sensor light is a motion sensor based LED light for dark places like closets, cabinets, hallways, attics etc., This LED light uses advanced PIR (Passive Infrared) motion sensor technology, which automatically turns the light on in the dark when motion gets detected within its sensing range. Set-up The following are the items in the box: 1. LED Sensor light 2. USB cable 3. 3M Adhesive Installation No tools are required for installation. Stick the 3M adhesive and Magnetic Strip together. Parts of the LED Sensor lights Switch: Used for turning the light on/off. Press the Switch button for 2 seconds to turn it on. USB Port: For charging the light. Input Voltage 5V. PIR Sensor: For detecting the motion. Light Sensor: For detecting the light. Power As there is a build-in Lithium battery, it can be charged directly using a USB cable. Blue light indicates it is charging. Red light indicates it is fully charged. The total charge time of the battery is 3-4 hours. Functions There are three different sensor modes in which this LED sensor light can be operated. Always on Mode: This mode keeps the light on for a long time. It works as a flashlight. Motion & Light Sensor Mode: This mode works in very dark conditions. It automatically turns on when motion is detected within 5 meters. The light automatically turns off in 30 seconds after motion is not detected. Only Motion Sensor Mode: This mode works at night time as well in the day time. It automatically turns on when motion is detected within 5 meters. The light automatically turns off in 30 seconds after motion is not detected. Switch Mechanism There are five modes of operating the switch button to get into each mode. Mode 1: Always On Press the Switch button for 5 seconds for Always On mode. This mode indicates that the light is always on. Mode 2: Motion & Light Sensor After turning on the light, press the Switch button for a short time, and a green indicator flashes for a second. This means Motion & Light Sensor mode is activated. Mode 3: Only Motion Sensor After turning on the light, press the Switch button twice, and a red indicator flashes for 5 seconds. Then, the Only Motion Sensor is on. Mode 4: Mode 1 & Mode 2 After turning on the light, press the Switch button lightly twice for 2 seconds. Mode 5: OFF Keep the Switch pressed for a long time up to 7 seconds to turn off the lights. Safety Precautions Do not install the light with wet hands. Avoid installing this light on a wet surface, on high temperatures places, or vent areas. Do not charge the light for more than 5 hours. Do not use the light till the charge is completely out. Always put the light in a dark area to get the complete advantage of the light.","title":"Quick Reference Guide"},{"location":"reference_guides/Quick-Reference-Guide/#purpose","text":"The purpose of this document is to provide instructions on how to install and use a new LED Sensor light.","title":"Purpose"},{"location":"reference_guides/Quick-Reference-Guide/#introduction","text":"OWL LED Sensor light is a motion sensor based LED light for dark places like closets, cabinets, hallways, attics etc., This LED light uses advanced PIR (Passive Infrared) motion sensor technology, which automatically turns the light on in the dark when motion gets detected within its sensing range.","title":"Introduction"},{"location":"reference_guides/Quick-Reference-Guide/#set-up","text":"The following are the items in the box: 1. LED Sensor light 2. USB cable 3. 3M Adhesive","title":"Set-up"},{"location":"reference_guides/Quick-Reference-Guide/#installation","text":"No tools are required for installation. Stick the 3M adhesive and Magnetic Strip together.","title":"Installation"},{"location":"reference_guides/Quick-Reference-Guide/#parts-of-the-led-sensor-lights","text":"Switch: Used for turning the light on/off. Press the Switch button for 2 seconds to turn it on. USB Port: For charging the light. Input Voltage 5V. PIR Sensor: For detecting the motion. Light Sensor: For detecting the light.","title":"Parts of the LED Sensor lights"},{"location":"reference_guides/Quick-Reference-Guide/#power","text":"As there is a build-in Lithium battery, it can be charged directly using a USB cable. Blue light indicates it is charging. Red light indicates it is fully charged. The total charge time of the battery is 3-4 hours.","title":"Power"},{"location":"reference_guides/Quick-Reference-Guide/#functions","text":"There are three different sensor modes in which this LED sensor light can be operated. Always on Mode: This mode keeps the light on for a long time. It works as a flashlight. Motion & Light Sensor Mode: This mode works in very dark conditions. It automatically turns on when motion is detected within 5 meters. The light automatically turns off in 30 seconds after motion is not detected. Only Motion Sensor Mode: This mode works at night time as well in the day time. It automatically turns on when motion is detected within 5 meters. The light automatically turns off in 30 seconds after motion is not detected.","title":"Functions"},{"location":"reference_guides/Quick-Reference-Guide/#switch-mechanism","text":"There are five modes of operating the switch button to get into each mode. Mode 1: Always On Press the Switch button for 5 seconds for Always On mode. This mode indicates that the light is always on. Mode 2: Motion & Light Sensor After turning on the light, press the Switch button for a short time, and a green indicator flashes for a second. This means Motion & Light Sensor mode is activated. Mode 3: Only Motion Sensor After turning on the light, press the Switch button twice, and a red indicator flashes for 5 seconds. Then, the Only Motion Sensor is on. Mode 4: Mode 1 & Mode 2 After turning on the light, press the Switch button lightly twice for 2 seconds. Mode 5: OFF Keep the Switch pressed for a long time up to 7 seconds to turn off the lights.","title":"Switch Mechanism"},{"location":"reference_guides/Quick-Reference-Guide/#safety-precautions","text":"Do not install the light with wet hands. Avoid installing this light on a wet surface, on high temperatures places, or vent areas. Do not charge the light for more than 5 hours. Do not use the light till the charge is completely out. Always put the light in a dark area to get the complete advantage of the light.","title":"Safety Precautions"},{"location":"reference_guides/dev_UI_components_reference/","text":"DEV UI Components Reference Guide Overview This reference document describes the components of DEV's user interface (UI) for users unfamiliar with the DEV website. Homepage components On the DEV homepage, after logging into your account, you will see: A sidebar A social feed Listings Trending tags, and A Create Post button Sidebar The sidebar serves as DEV's navigation system. Reference the table below to learn about each menu item in the sidebar. Menu Item Description \ud83c\udfe1 Home This menu item navigates you to DEV's homepage. \ud83d\uddc3 Reading List This menu item navigates you to your bookmarked DEV posts. \ud83c\udf99 Podcasts This menu item navigates you to DEV's Podcasts page, where you can discover podcasts related to tech. \ud83c\udfa5 Video This menu item navigates you to the DEV Community on Video page, where you can peruse and watch videos posted on DEV. \ud83c\udff7 Tags This menu item navigates you to the Top tags page that lists and defines popular DEV tags to follow. \ud83d\udca1 FAQ This menu item navigates you to the Frequently Asked Questions page, where you can find answers to questions you may have. \ud83d\udecd Forem Shop This menu item navigates you to the Forem store to purchase Forum merchandise. \u2764\ufe0f Sponsors This menu item navigates you to the Sponsorship Options page, where you can learn about DEV's current sponsors, how you can become a sponsor, and access the Sponsorship Interest Form. About This menu item navigates you to the About DEV page, where you can learn more about DEV. Contact This menu item navigates you to the Contacts page, where you can find DEV's contact information. Other The Other is a subsection within the sidebar. Reference the table below to learn about each menu item in the Other section of the sidebar. |Menu Item|Description| |--|--| |\ud83d\udc4d Code of Conduct|This menu item navigates you to DEV's Code of Conduct page, where you can learn DEV's rules and proper practices for community members to follow.| |\ud83e\udd13 Privacy Policy|This menu item navigates you to DEV's Privacy Policy page, where you can learn about how DEV collects, safeguards, and manages your information.| |\ud83d\udc40 Terms of Use|This menu item navigates you to DEV's Web Site Terms and Conditions of Use page that discloses the rules, conditions, limitations, and other details that DEV and community members must agree to when using the website.| Social Social icons are included in the sidebar that links to DEV's social media accounts, which include: Twitter Facebook GitHub Instagram, and Twitch My Tags The My Tags is a subsection in the sidebar that lists tags you currently follow. Adjacent to the My Tags title, you can click the Customize tag priority button to change the order of your tags. Social feed The social feed displays DEV posts. You can filter DEV posts by selecting: Relevant Latest, and Top Reference the table below to learn what each social feed filter means. Filter Description Relevant The Relevant filter displays DEV posts with tags you follow. Latest The Latest filter displays new DEV posts. Top The Top filter displays popular and trending DEV posts. Listings Listings displays job posts, events, new products, and other listings. You can view more listings by clicking See all where you can find and filter active listings to narrow your search. You can also create a new listing. Trending tags DEV displays and lists DEV posts that are using trending tags. Create post The Create Post button on the top navigation allows you to create a new DEV post. DEV's Editor When you create a new post, you'll access DEV's editor, which allows you to draft a DEV post. Reference the table below to learn about DEV's editor components: Component Description Add a cover image This lets you upload a cover picture for your DEV post. Add up to 4 tags... This lets you add up to four tags relevant to your DEV post. Upon clicking, it will automatically provide a dropdown menu showing suggestions of trending tags, or you can create a new tag. Toolbar This provides editing tools for creating your content, such as bolding and italicizing text, using ordered or unordered lists, creating headings, calling out quotes, displaying code, using code blocks, and adding images. \u22ee (vertically aligned ellipsis) This lets you view and use more editing tools, including underlining and strikethrough text, a line divider, and a button to view DEV's editor guide. Write your post content here... This lets you type and create the content of your post in Markdown. Publish This lets you publish your DEV post for public viewing. Save draft This lets you save your DEV post as a draft, allowing you to revisit your unpublished post later. Post options This lets you change the canonical URL, and if your post is or will be a part of a series, you can create a unique name for the series. Edit This lets you edit your DEV post after it's published or saved as a draft. Preview This lets you see how your DEV post will render.","title":"DEV UI Components Reference Guide"},{"location":"reference_guides/dev_UI_components_reference/#dev-ui-components-reference-guide","text":"","title":"DEV UI Components Reference Guide"},{"location":"reference_guides/dev_UI_components_reference/#overview","text":"This reference document describes the components of DEV's user interface (UI) for users unfamiliar with the DEV website.","title":"Overview"},{"location":"reference_guides/dev_UI_components_reference/#homepage-components","text":"On the DEV homepage, after logging into your account, you will see: A sidebar A social feed Listings Trending tags, and A Create Post button","title":"Homepage components"},{"location":"reference_guides/dev_UI_components_reference/#sidebar","text":"The sidebar serves as DEV's navigation system. Reference the table below to learn about each menu item in the sidebar. Menu Item Description \ud83c\udfe1 Home This menu item navigates you to DEV's homepage. \ud83d\uddc3 Reading List This menu item navigates you to your bookmarked DEV posts. \ud83c\udf99 Podcasts This menu item navigates you to DEV's Podcasts page, where you can discover podcasts related to tech. \ud83c\udfa5 Video This menu item navigates you to the DEV Community on Video page, where you can peruse and watch videos posted on DEV. \ud83c\udff7 Tags This menu item navigates you to the Top tags page that lists and defines popular DEV tags to follow. \ud83d\udca1 FAQ This menu item navigates you to the Frequently Asked Questions page, where you can find answers to questions you may have. \ud83d\udecd Forem Shop This menu item navigates you to the Forem store to purchase Forum merchandise. \u2764\ufe0f Sponsors This menu item navigates you to the Sponsorship Options page, where you can learn about DEV's current sponsors, how you can become a sponsor, and access the Sponsorship Interest Form. About This menu item navigates you to the About DEV page, where you can learn more about DEV. Contact This menu item navigates you to the Contacts page, where you can find DEV's contact information.","title":"Sidebar"},{"location":"reference_guides/dev_UI_components_reference/#other","text":"The Other is a subsection within the sidebar. Reference the table below to learn about each menu item in the Other section of the sidebar. |Menu Item|Description| |--|--| |\ud83d\udc4d Code of Conduct|This menu item navigates you to DEV's Code of Conduct page, where you can learn DEV's rules and proper practices for community members to follow.| |\ud83e\udd13 Privacy Policy|This menu item navigates you to DEV's Privacy Policy page, where you can learn about how DEV collects, safeguards, and manages your information.| |\ud83d\udc40 Terms of Use|This menu item navigates you to DEV's Web Site Terms and Conditions of Use page that discloses the rules, conditions, limitations, and other details that DEV and community members must agree to when using the website.|","title":"Other"},{"location":"reference_guides/dev_UI_components_reference/#social","text":"Social icons are included in the sidebar that links to DEV's social media accounts, which include: Twitter Facebook GitHub Instagram, and Twitch","title":"Social"},{"location":"reference_guides/dev_UI_components_reference/#my-tags","text":"The My Tags is a subsection in the sidebar that lists tags you currently follow. Adjacent to the My Tags title, you can click the Customize tag priority button to change the order of your tags.","title":"My Tags"},{"location":"reference_guides/dev_UI_components_reference/#social-feed","text":"The social feed displays DEV posts. You can filter DEV posts by selecting: Relevant Latest, and Top Reference the table below to learn what each social feed filter means. Filter Description Relevant The Relevant filter displays DEV posts with tags you follow. Latest The Latest filter displays new DEV posts. Top The Top filter displays popular and trending DEV posts.","title":"Social feed"},{"location":"reference_guides/dev_UI_components_reference/#listings","text":"Listings displays job posts, events, new products, and other listings. You can view more listings by clicking See all where you can find and filter active listings to narrow your search. You can also create a new listing.","title":"Listings"},{"location":"reference_guides/dev_UI_components_reference/#trending-tags","text":"DEV displays and lists DEV posts that are using trending tags.","title":"Trending tags"},{"location":"reference_guides/dev_UI_components_reference/#create-post","text":"The Create Post button on the top navigation allows you to create a new DEV post.","title":"Create post"},{"location":"reference_guides/dev_UI_components_reference/#devs-editor","text":"When you create a new post, you'll access DEV's editor, which allows you to draft a DEV post. Reference the table below to learn about DEV's editor components: Component Description Add a cover image This lets you upload a cover picture for your DEV post. Add up to 4 tags... This lets you add up to four tags relevant to your DEV post. Upon clicking, it will automatically provide a dropdown menu showing suggestions of trending tags, or you can create a new tag. Toolbar This provides editing tools for creating your content, such as bolding and italicizing text, using ordered or unordered lists, creating headings, calling out quotes, displaying code, using code blocks, and adding images. \u22ee (vertically aligned ellipsis) This lets you view and use more editing tools, including underlining and strikethrough text, a line divider, and a button to view DEV's editor guide. Write your post content here... This lets you type and create the content of your post in Markdown. Publish This lets you publish your DEV post for public viewing. Save draft This lets you save your DEV post as a draft, allowing you to revisit your unpublished post later. Post options This lets you change the canonical URL, and if your post is or will be a part of a series, you can create a unique name for the series. Edit This lets you edit your DEV post after it's published or saved as a draft. Preview This lets you see how your DEV post will render.","title":"DEV's Editor"}]}